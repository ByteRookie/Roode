substitutions:
  devicename: roode_dev
  friendly_name: $devicename
external_components:
  - source: components
esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  libraries:
    - pololu/VL53L1X@^1.3.0
  # on_boot:
  #   priority: 600
  #   then:
  #     - sensor.template.publish:
  #         id: $devicename
  #         state: !lambda "return $devicename->peopleCounter;"

<<: !include common/common.yaml

# Enable logging
logger:
  level: DEBUG

#status_led:
#  pin:
#    number: D0
#    inverted: True

web_server:
  port: 80
  auth:
    username: admin
    password: "1248"

i2c:
  sda: 4
  scl: 5

roode:
  address: 0x29
  update_interval: 100ms
  calibration: true
  roi_height: 5
  roi_width: 6
  threshold_percentage: 80
  roi_calibration: false

switch:
  - platform: restart
    name: $friendly_name Restart
binary_sensor:
  - platform: status
    name: $friendly_name Status
  - platform: roode 
    presence_sensor:
        name: $friendly_name presence
      

  # - platform: template
  #   name: $friendly_name somebody in
  #   lambda: |-
  #     if ($devicename->state > 0) {
  #       // somebody is in the room
  #       return true;
  #     } else {
  #       // nobody is in the room
  #       return false;
  #     }
sensor:
  - platform: roode
    id: hallway
    distance_sensor:
      name: $friendly_name distance
      filters:
        - delta: 100.0
    people_counter_sensor:
      name: $friendly_name people counter
    threshold_zone0:
      name: $friendly_name Zone 0
    threshold_zone1:
      name: $friendly_name Zone 1
    roi_height:
      name: $friendly_name ROI height
    roi_width:
      name: $friendly_name ROI width

  - platform: wifi_signal
    name: $friendly_name RSSI
    update_interval: 60s

  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 120s
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  # - platform: mqtt_subscribe
  #   name: "People reset"
  #   id: people_reset
  #   topic: $devicename/sensor/people/reset
  #   internal: true
  #   on_value:
  #     then:
  #       - lambda: |-
  #           resetCounter = 1;
  # - platform: mqtt_subscribe
  #   name: "People set counter"
  #   id: people_set_counter
  #   topic: $devicename/sensor/people/set
  #   internal: true
  #   on_value:
  #     then:
  #       - lambda: |-
  #           if($devicename->peopleCounter!=id(people_set_counter).state){
  #             $devicename->peopleCounter=id(people_set_counter).state;
  #             forceSetValue=1;
  #           }
  # - platform: mqtt_subscribe
  #   name: "People recalibrate"
  #   id: people_recalibrate
  #   topic: $devicename/sensor/people/recalibrate
  #   internal: true
  #   on_value:
  #     then:
  #       - lambda: |-
  #           $devicename->recalibrate = 1;

text_sensor:
  - platform: roode
    version:
        icon: mdi:git
        name: $friendly_name version

  - platform: template
    name: $friendly_name Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
