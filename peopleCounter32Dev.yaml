substitutions:
  devicename: roode32dev
  friendly_name: $devicename

external_components:
  refresh: always
  source: components

esphome:
  name: $devicename

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino
    
wifi:
  networks:
    - ssid: !secret ssid1
      password: !secret ssid1_password
  use_address: $devicename
  fast_connect: True
  power_save_mode: none
  domain: .local

captive_portal:

api:
  password: !secret api_password
  reboot_timeout: 60min
  services:
    - service: recalibrate
      then:
        - lambda: "id(roode_platform)->recalibration();"

ota:
  password: !secret ota_password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret web_password

# Enable logging
logger:
  level: INFO

i2c:
  sda: 4
  scl: 5

roode:
  id: roode_platform
  i2c_address: 0x29
  update_interval: 100ms
  calibration:
    max_threshold_percentage: 85
    min_threshold_percentage: 5
    roi_calibration: true
    # sensor_offset_calibration: 8
    # sensor_xtalk_calibration: 53406
  # manual:
  #   sensor_mode: 3
  #   manual_threshold: 1280
  #   timing_budget: 200
  # sampling: 3
  zones:
    invert_direction: true
    # entry:
    #   roi:
    #     roi_height: 12
    #     roi_width: 6
    # exit:
    #   roi:
    #     roi_height: 12
    #     roi_width: 6

button:
  - platform: restart
    name: $friendly_name Restart
    entity_category: config
  - platform: template
    name: $friendly_name Recalibrate
    on_press:
      - lambda: id(roode_platform)->recalibration();
    entity_category: config

number:
  - platform: roode
    people_counter:
      id: counter
      name: $friendly_name people counter

binary_sensor:
  - platform: status
    name: $friendly_name API Status
  - platform: roode
    presence_sensor:
      name: $friendly_name presence

sensor:
  - platform: roode
    id: roode_sensors
    distance_entry:
      name: $friendly_name distance zone 0
      filters:
        - delta: 100
    distance_exit:
      name: $friendly_name distance zone 1
      filters:
        - delta: 100
    max_threshold_entry:
      name: $friendly_name max zone 0
    max_threshold_exit:
      name: $friendly_name max zone 1
    min_threshold_entry:
      name: $friendly_name min zone 0
    min_threshold_exit:
      name: $friendly_name min zone 1
    roi_height_entry:
      name: $friendly_name ROI height zone 0
    roi_width_entry:
      name: $friendly_name ROI width zone 0
    roi_height_exit:
      name: $friendly_name ROI height zone 1
    roi_width_exit:
      name: $friendly_name ROI width zone 1
    sensor_status:
      name: Sensor Status

  - platform: wifi_signal
    name: $friendly_name RSSI
    update_interval: 60s

  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

text_sensor:
  - platform: roode
    version:
      name: $friendly_name version
  - platform: roode
    entry_exit_event:
      name: $friendly_name last direction
  - platform: template
    name: $friendly_name Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

font:
  - file: "fonts/Roboto-Regular.ttf"
    id: my_font
    size: 20
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    id: screen
    reset_pin: D0
    address: 0x3C
    lambda: |-
      it.printf(127, 60, id(my_font), TextAlign::BASELINE_RIGHT , "Counter: %d", id(counter)->state);
