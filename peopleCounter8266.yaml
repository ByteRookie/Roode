substitutions:
  name: "bathroom-door-sensor"
  sensor_name: "Bathroom Door"
  project_name: "J-Sensor.Doorway-Counter"
  project_version: "1.0.0 D"
  sensor_invert: "true"
  sensor_min: "0%" # % or mm
  sensor_max: "95%" # % or mm
  occupancy_delay: 5s

external_components:
  refresh: always
  source:
    type: git
    url: https://github.com/Lyr3x/Roode
    ref: master

esphome:
  name: "${name}"
  # name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: True
  power_save_mode: light
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name}-WIFI"
    password: "NEAG2LwwsWCO"

captive_portal:

api:

ota:
  #password:
  platform: esphome


# Enable logging
logger:
  level: INFO

i2c:
  sda: 4
  scl: 5

# VL53L1X sensor configuration is separate from Roode people counting algorithm
vl53l1x:
  calibration:
    # The ranging mode is different based on how long the distance is that the sensor need to measure.
    # The longer the distance, the more time the sensor needs to take a measurement.
    # Available options are: auto, shortest, short, medium, long, longer, longest
    ranging: auto

roode:
  id: roode_platform
  # Smooth out measurements by using the minimum distance from this number of readings
  sampling: 2
  roi: { height: 16, width: 6 }
  orientation: parallel
  # The detection thresholds for determining whether a measurement should count as a person crossing.
  # A reading must be greater than the minimum and less than the maximum to count as a crossing.
  # These can be given as absolute distances or as percentages.
  # Percentages are based on the automatically determined idle or resting distance.
  detection_thresholds:
     min: ${sensor_min}  #234mm # absolute distance
     max: ${sensor_max} # percent based on idle distance
  zones:
    invert: ${sensor_invert}

button:
  - platform: restart
    name: ${sensor_name} Sensor Restart
    entity_category: config
  - platform: template
    name: ${sensor_name} Sensor Recalibrate
    on_press:
      - lambda: id(roode_platform)->recalibration();
    entity_category: config

number:
  - platform: roode
    people_counter:
      id: counter
      name: ${sensor_name} Sensor people counter

binary_sensor:
  - platform: status
    name: ${sensor_name}  Sensor API Status
  - platform: roode
    presence_sensor:
      name: ${sensor_name}  Sensor presence

sensor:
  - platform: roode
    id: roode_sensors
    distance_entry:
      name: ${sensor_name} Sensor distance zone 0
      filters:
        - delta: 100
    distance_exit:
      name: ${sensor_name} distance zone 1
      filters:
        - delta: 100
    max_threshold_entry:
      name: ${sensor_name} Sensor max zone 0
    max_threshold_exit:
      name: ${sensor_name} Sensor max zone 1
    min_threshold_entry:
      name: ${sensor_name} Sensor min zone 0
    min_threshold_exit:
      name: ${sensor_name} Sensor min zone 1
    roi_height_entry:
      name: ${sensor_name} Sensor ROI height zone 0
    roi_width_entry:
      name: ${sensor_name} Sensor ROI width zone 0
    roi_height_exit:
      name: ${sensor_name} Sensor ROI height zone 1
    roi_width_exit:
      name: ${sensor_name} Sensor ROI width zone 1
    sensor_status:
      name: Sensor Status

  - platform: wifi_signal
    name: ${sensor_name} Sensor RSSI
    update_interval: 60s

  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

text_sensor:
  - platform: roode
    version:
      name: ${sensor_name} Sensor version
  - platform: roode
    entry_exit_event:
      name: ${sensor_name} Sensor last direction
  - platform: template
    name: ${sensor_name} Sensor Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
